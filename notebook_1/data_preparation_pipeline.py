# -*- coding: utf-8 -*-
"""data_preparation_pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hsks94vSpLa675tv4jlQi8cVNBnQUcrw
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# 1. Load the datasets
def load_datasets():
    """Load all four datasets"""
    print("Loading datasets...")
    try:
        revenue_3m_df = pd.read_csv('processed_revenue_3m.csv')
        booking_3m_df = pd.read_csv('processed_booking_3m.csv')
        revenue_12m_df = pd.read_csv('processed_revenue_12m.csv')
        booking_12m_df = pd.read_csv('processed_booking_12m.csv')
        print("All datasets loaded successfully!")
        return revenue_3m_df, booking_3m_df, revenue_12m_df, booking_12m_df
    except Exception as e:
        print(f"Error loading datasets: {e}")
        return None, None, None, None

def prepare_forecasting_data(df):
    """
    Prepare airline dataset by adding realistic values for overbooking, no-show,
    denied boarding, and cancellation based on industry patterns and booking characteristics.
    """
    # Create copy to avoid modifying original
    df = df.copy()

    # Convert Dep_Date to datetime if not already
    df['Dep_Date'] = pd.to_datetime(df['Dep_Date'])

    # Extract hour from Dep_time string safely
    def extract_hour(time_str):
        try:
            # Handle different time formats
            if ':' in str(time_str):
                return int(str(time_str).split(':')[0])
            return int(str(time_str)[:2])  # Take first two characters as hour
        except:
            return 12  # Default to noon if conversion fails

    # 1. Calculate no-show probability
    df['day_of_week'] = df['Dep_Date'].dt.dayofweek
    df['hour'] = df['Dep_time'].apply(extract_hour)

    # Base no-show rates by booking class
    booking_class_noshow = {
        'F': 0.02, 'J': 0.03, 'Y': 0.05, 'B': 0.06,
        'H': 0.07, 'K': 0.08, 'L': 0.09, 'M': 0.10,
        'N': 0.11, 'Q': 0.12, 'S': 0.13, 'T': 0.14,
        'V': 0.15, 'W': 0.12, 'G': 0.13
    }

    # Calculate base no-show rate
    df['no_show'] = df['Booking Class'].map(lambda x: booking_class_noshow.get(x, 0.10))

    # Adjust for day of week
    weekend_mask = df['day_of_week'].isin([5, 6])
    df.loc[weekend_mask, 'no_show'] *= 1.2

    # Adjust for early morning flights
    early_flight_mask = df['hour'].between(5, 9)
    df.loc[early_flight_mask, 'no_show'] *= 0.8

    # Add random variation
    df['no_show'] *= np.random.uniform(0.8, 1.2, size=len(df))

    # 2. Calculate cancellation rates
    # Use a fixed reference date if max date is problematic
    reference_date = pd.Timestamp('2024-01-01')
    df['days_to_departure'] = (df['Dep_Date'] - reference_date).dt.days

    df['cancellation'] = df['Booking Class'].map(lambda x: booking_class_noshow.get(x, 0.08) * 0.8)

    # Adjust for advance purchase
    df['cancellation'] *= np.where(df['days_to_departure'] > 30, 1.2,
                                 np.where(df['days_to_departure'] > 14, 1.0, 0.7))

    # Add random variation
    df['cancellation'] *= np.random.uniform(0.8, 1.2, size=len(df))

    # 3. Calculate overbooking levels
    df['overbooking'] = (df['no_show'] + df['cancellation']) * 1.1

    # Add route-specific variation
    df['route'] = df['Origin'] + '_' + df['Destination']
    route_factors = df.groupby('route')['Booking Class Fare USD'].mean()
    route_factors = (route_factors - route_factors.mean()) / route_factors.std()
    df['overbooking'] *= df['route'].map(lambda x: np.exp(route_factors.get(x, 0) * 0.1))

    # 4. Calculate denied boarding
    df['denied_boarding'] = df['overbooking'] * 0.02

    # Ensure all values are between 0 and 1
    for col in ['no_show', 'cancellation', 'overbooking', 'denied_boarding']:
        df[col] = df[col].clip(0, 1)

    # Drop temporary columns
    df = df.drop(['day_of_week', 'hour', 'days_to_departure', 'route'], axis=1)

    return df

def verify_forecasting_data(df, dataset_name):
    """Verify the forecasting data has been properly generated"""
    print(f"\nVerifying {dataset_name}:")
    print("\nSummary statistics for forecasting columns:")
    forecast_cols = ['no_show', 'cancellation', 'overbooking', 'denied_boarding']
    print(df[forecast_cols].describe())
    print("\nSample of first 5 rows for forecasting columns:")
    print(df[forecast_cols].head())
    print("\nChecking for any null values:")
    print(df[forecast_cols].isnull().sum())

def main():
    # 1. Load all datasets
    print("Step 1: Loading datasets...")
    revenue_3m_df, booking_3m_df, revenue_12m_df, booking_12m_df = load_datasets()

    if revenue_3m_df is None:
        return

    # 2. Process all datasets
    print("\nStep 2: Processing datasets...")
    print("Adding forecasting values to all datasets...")

    processed_revenue_3m = prepare_forecasting_data(revenue_3m_df)
    processed_booking_3m = prepare_forecasting_data(booking_3m_df)
    processed_revenue_12m = prepare_forecasting_data(revenue_12m_df)
    processed_booking_12m = prepare_forecasting_data(booking_12m_df)

    # 3. Verify the processed data
    print("\nStep 3: Verifying processed data...")
    verify_forecasting_data(processed_revenue_3m, "3-month Revenue Dataset")
    verify_forecasting_data(processed_booking_3m, "3-month Booking Dataset")
    verify_forecasting_data(processed_revenue_12m, "12-month Revenue Dataset")
    verify_forecasting_data(processed_booking_12m, "12-month Booking Dataset")

    # 4. Save processed datasets
    print("\nStep 4: Saving processed datasets...")
    processed_revenue_3m.to_csv('forecasting_revenue_3m.csv', index=False)
    processed_booking_3m.to_csv('forecasting_booking_3m.csv', index=False)
    processed_revenue_12m.to_csv('forecasting_revenue_12m.csv', index=False)
    processed_booking_12m.to_csv('forecasting_booking_12m.csv', index=False)
    print("All processed datasets have been saved!")

    print("\nData preparation complete! The processed datasets are ready for model development.")
    return processed_revenue_3m, processed_booking_3m, processed_revenue_12m, processed_booking_12m

if __name__ == "__main__":
    main()